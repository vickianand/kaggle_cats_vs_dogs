from matplotlib import pyplot as plt
from argparse import ArgumentParser
import numpy as np


def select_from_lines(lines, key, stop_char):
    """
    process list of lines to to select only those lines which have key 
    in them. And for such lines keep the text following key till a 
    stop_char is found
    """
    results = []
    for line in lines:
        if key in line:
            results.append(line.split(key)[1].split(stop_char)[0])
    return results


def parse_log_file(fname):
    lines = None
    with open(fname) as f:
        lines = f.readlines()

    batch_lines = list(filter(lambda l: ": Validation" not in l, lines))
    epoch_lines = list(filter(lambda l: ": Validation" in l, lines))

    losses_10th_batch = list(map(float, select_from_lines(batch_lines, "loss = ", ",")))
    accr_10th_batch = list(map(float, select_from_lines(batch_lines, "uracy = ", "\n")))

    losses_epoch = list(map(float, select_from_lines(epoch_lines, "loss = ", ",")))
    accr_epoch = list(map(float, select_from_lines(epoch_lines, "uracy = ", "\n")))

    print(
        "for {}, lens are: {}, {}, {}, {}".format(
            fname,
            len(losses_10th_batch),
            len(accr_10th_batch),
            len(losses_epoch),
            len(accr_epoch),
        )
    )
    return losses_10th_batch, accr_10th_batch, losses_epoch, accr_epoch


def accumulate_batches_to_epochs(losses, batch_per_epoch):
    assert (len(losses) % batch_per_epoch) == 0
    epoch_losses = []
    for i in range(0, len(losses), batch_per_epoch):
        epoch_losses.append(sum(losses[i : i + batch_per_epoch]) / batch_per_epoch)
    return epoch_losses


def plot_lists(losses, labels, x_l, y_l, save_file=None):
    assert len(losses) == len(labels)
    for i, l in enumerate(losses):
        plt.plot(l, label=labels[i])
    plt.legend()
    plt.xlabel(x_l)
    plt.ylabel(y_l)
    plt.grid()

    if save_file is None:
        plt.show()
    else:
        plt.savefig(save_file)
        plt.close()


def compare_models():
    f1_name = "../logs/submission1_train.log"
    # f2_name = "../logs/submission2_train.log"

    labels = ["VggTypeNet with out_channels_list = [64, 128, 64]"]

    b_t_ls_1, b_t_ac_1, ep_ls_1, ep_ac_1 = parse_log_file(f1_name)
    b_t_ls_1, b_t_ac_1, ep_ls_1, ep_ac_1 = parse_log_file(f1_name)

    v_losses = [ep_ls_1]
    v_accrs = [ep_ac_1]

    t_losses = [b_t_ls_1]
    t_accrs = [b_t_ac_1]

    # plot_lists(v_losses, labels, "Epochs", "Validation loss")
    # plot_lists(v_accrs, labels, "Epochs", "Validation accuracies")
    plot_lists(t_losses, labels, "Mini Batches", "Training loss")
    plot_lists(t_accrs, labels, "Mini Batches", "Training accuracies")


def print_min(list, name):
    np_array = np.array(list)
    min_val = np_array.min()
    min_idx = np_array.argmin()
    print("Least {}: {} at index: {}".format(name, min_val, min_idx))


def print_max(list, name):
    np_array = np.array(list)
    max_val = np_array.max()
    max_idx = np_array.argmax()
    print("Maximum {}: {} at index: {}".format(name, max_val, max_idx))


def plot_train_vs_validn(fname, save=False, max_epoch=35):
    save_file = None
    b_t_ls, b_t_ac, ep_v_ls, ep_v_ac = parse_log_file(fname)
    ep_t_ls = accumulate_batches_to_epochs(b_t_ls, 15)
    ep_t_ac = accumulate_batches_to_epochs(b_t_ac, 15)

    ep_t_ls, ep_t_ac, ep_v_ls, ep_v_ac = map(
        lambda x, max_idx=max_epoch: x[:max_idx], [ep_t_ls, ep_t_ac, ep_v_ls, ep_v_ac]
    )

    # print best values
    print_min(ep_v_ls, "validation loss")
    print_max(ep_v_ac, "validation accuracy")

    # plotting part
    losses = [ep_t_ls, ep_v_ls]
    labels = ["Training", "Validation"]
    save_file = fname.split(".log")[0] + "train_vs_validn_loss.png" if save else None
    plot_lists(losses, labels, "epochs", "loss", save_file)

    errors = [100 - np.array(ep_t_ac), 100 - np.array(ep_v_ac)]
    labels = ["Training", "Validation"]
    save_file = fname.split(".log")[0] + "train_vs_validn_error.png" if save else None
    plot_lists(errors, labels, "epochs", "error (%ge)", save_file)


if __name__ == "__main__":
    parser = ArgumentParser(description="")
    parser.add_argument(
        "--log", help="Path to log file generated by train.py", type=str
    )
    parser.add_argument(
        "--save",
        action="store_const",
        const=True,
        default=False,
        help="add this flag if you want to save the generated plots",
    )
    parser.add_argument(
        "--max_epoch", type=int, default=35, help="Number of epochs to parse"
    )
    args = parser.parse_args()

    plot_train_vs_validn(args.log, args.save, args.max_epoch)
