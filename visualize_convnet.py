# -*- coding: utf-8 -*-
"""visualize_convnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18OMzBWL8ah1CqgHYHqasnTWOF-1NAPcN
"""

import numpy as np
from matplotlib import pyplot as plt
from PIL import Image

import torch
from torchvision import transforms, utils
from model.models import VggTypeNet

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

cat_path = "data/trainset/Cat/1.Cat.jpg"
dog_path = "data/trainset/Dog/1.Dog.jpg"
cat_img = Image.open(cat_path)
dog_img = Image.open(dog_path)
plt.subplot(1, 2, 1)
plt.imshow(cat_img)
plt.subplot(1, 2, 2)
plt.imshow(dog_img)
plt.close()


def process_image(img):
    trnsfrm = transforms.ToTensor()
    return trnsfrm(img).to(device).unsqueeze(0)


cat_tensor = process_image(cat_img)
dog_tensor = process_image(dog_img)

model_path = "data/model/m3_ep415_ac93.pt"
model = VggTypeNet(channel_list=[64, 128, 64], num_classes=1).to(device)
model.load_state_dict(torch.load(model_path, map_location=device))

# print(model)

modulelist = list(model.conv_net.modules())
for i, m in enumerate(modulelist):
    print(i, "\n=======================================")
    print(m)

"""## Output of each individual layer"""


def to_grayscale(image):
    """
    input is (d,w,h)
    converts 3D image tensor to grayscale images corresponding to each channel
    """
    #     image = torch.mean(image, dim=0)
    image = torch.sum(image, dim=0)
    image = torch.div(image, image.shape[0])
    return image


def layer_outputs(image, im_name):
    # outputs = [image]
    # names = ["original"]
    outputs = []
    names = []
    # for layer in (modulelist[3:3+7] + modulelist[12:12+7] + modulelist[21:21+7]):
    for i, layer in enumerate(
        modulelist[3 : (3 + 5)] + modulelist[10 : (10 + 5)] + modulelist[17 : (17 + 5)]
    ):
        image = layer(image)
        # print(image)
        outputs.append(image)
        names.append(str(layer))

    output_im = []
    for i in outputs:
        i = i.squeeze(0)
        temp = to_grayscale(i)
        output_im.append(temp.data.cpu().numpy())

    fig = plt.figure()
    plt.rcParams["figure.figsize"] = (30, 50)

    for i in range(len(output_im)):
        a = fig.add_subplot(5, 3, i + 1)
        imgplot = plt.imshow(output_im[i])
        plt.axis("off")
        a.set_title(names[i].partition("(")[0], fontsize=50)

    plt.savefig(im_name + "_layer_outputs.jpg", bbox_inches="tight")
    plt.close()


layer_outputs(cat_tensor, "cat")
layer_outputs(cat_tensor, "cat")

layer_outputs(dog_tensor, "dog")

